(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{428:function(v,t,_){"use strict";_.r(t);var r=_(43),e=Object(r.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"javascript"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[v._v("#")]),v._v(" javascript")]),v._v(" "),_("h3",{attrs:{id:"js-高级知识点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-高级知识点"}},[v._v("#")]),v._v(" js 高级知识点")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("内存泄漏")])]),v._v(" "),_("li",[_("p",[v._v("闭包")])]),v._v(" "),_("li",[_("p",[v._v("函数声明、函数表达式、匿名函数")])]),v._v(" "),_("li",[_("p",[v._v("IIFE (立即调用的函数表达式)")])]),v._v(" "),_("li",[_("p",[v._v("事件循环，事件委托(delegate)，事件冒泡，事件捕获")])]),v._v(" "),_("li",[_("p",[v._v("事件流分为三个阶段，捕获阶段、目标阶段、冒泡阶段。")])]),v._v(" "),_("li",[_("p",[v._v("Web Worker")])]),v._v(" "),_("li",[_("p",[v._v("原型及原型链")])]),v._v(" "),_("li",[_("p",[v._v("this")])]),v._v(" "),_("li",[_("p",[v._v("new 原理 "),_("a",{attrs:{href:"https://segmentfault.com/a/1190000021813437",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://segmentfault.com/a/1190000021813437"),_("OutboundLink")],1)])]),v._v(" "),_("li",[_("p",[v._v("js 自定义事件及执行")])]),v._v(" "),_("li",[_("p",[v._v("JS 解析过程")])]),v._v(" "),_("li",[_("p",[v._v("JS 运行机制")])])]),v._v(" "),_("h3",{attrs:{id:"js-概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-概念"}},[v._v("#")]),v._v(" js 概念")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的指针")])]),v._v(" "),_("li",[_("p",[v._v("js 内存模型\n调用栈（Call Stack）：用于主线程任务的执行。"),_("br"),v._v("\n堆（Heap）：用于存放非结构数据，如程序分配的变量和对象。"),_("br"),v._v("\n任务队列（Queue）: 用于存放异步任务。")])]),v._v(" "),_("li",[_("p",[v._v("任务：")]),v._v(" "),_("p",[v._v("宏任务(macro)task 主要包含："),_("br"),v._v("\nscript( 整体代码)、"),_("br"),v._v("\nsetTimeout、"),_("br"),v._v("\nsetInterval、"),_("br"),v._v("\nI/O、UI 交互事件、"),_("br"),v._v("\nsetImmediate(Node.js 环境)")]),v._v(" "),_("p",[v._v("微任务 microtask 主要包含："),_("br"),v._v("\nPromise 的 then 或 catch,"),_("br"),v._v("\nObject.observer,"),_("br"),v._v("\nMutationObserver."),_("br"),v._v("\nprocess.nextTick(Node.js 环境)")])]),v._v(" "),_("li",[_("p",[v._v("事件驱动，就是将一切抽象为事件")])]),v._v(" "),_("li",[_("p",[v._v("消息队列： 消息队列是一个先进先出的队列，里面放着各种各样的消息；")])]),v._v(" "),_("li",[_("p",[v._v("事件循环： 事件循环是指主线程重复从消息队列中取消息，执行的过程。")])]),v._v(" "),_("li",[_("p",[v._v("for 循环中使用 return 会报错，forEach 中使用 return 不会报错，但 rerutn 并不会生效")])]),v._v(" "),_("li",[_("p",[v._v("哪个对象调用函数，函数里面的 this 指向哪个对象")])]),v._v(" "),_("li",[_("p",[v._v("Event Loop（事件循环）是 JavaScript 的执行机制。")])]),v._v(" "),_("li",[_("p",[v._v("JavaScript 是一门单线程语言。")])]),v._v(" "),_("li",[_("p",[v._v("事件委托 是通过事件冒泡的原理，利用父级去触发子级的事件。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);