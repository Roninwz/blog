(window.webpackJsonp=window.webpackJsonp||[]).push([[280],{640:function(t,e,a){"use strict";a.r(e);var o=a(43),r=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" vuex")]),t._v(" "),a("h3",{attrs:{id:"_1-你使用过-vuex-吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-你使用过-vuex-吗？"}},[t._v("#")]),t._v(" 1.你使用过 Vuex 吗？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("简介：")]),t._v(" "),a("blockquote",[a("p",[t._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\n（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。")])])]),t._v(" "),a("li",[a("p",[t._v("主要包括以下几个模块：")]),t._v(" "),a("p",[t._v("State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。"),a("br"),t._v("\nGetter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。"),a("br"),t._v("\nMutation：是唯一更改 store 中状态的方法，且必须是同步函数。"),a("br"),t._v("\nAction：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。\nModule：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。")])])]),t._v(" "),a("h3",{attrs:{id:"_2-简述-vuex-的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-简述-vuex-的工作原理"}},[t._v("#")]),t._v(" 2.简述 vuex 的工作原理")]),t._v(" "),a("h3",{attrs:{id:"_3-store-是怎么注册的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-store-是怎么注册的"}},[t._v("#")]),t._v(" 3.store 是怎么注册的?")]),t._v(" "),a("blockquote",[a("p",[t._v("vuex 在 vue 的生命周期中的初始化钩子前插入一段 Vuex 初始化代码。给 Vue 的实例注入一个 $store 的属性")])]),t._v(" "),a("h3",{attrs:{id:"_4-mutation，commit-是怎么实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-mutation，commit-是怎么实现的"}},[t._v("#")]),t._v(" 4.mutation，commit 是怎么实现的?")]),t._v(" "),a("h3",{attrs:{id:"_5-辅助函数是怎么实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-辅助函数是怎么实现的"}},[t._v("#")]),t._v(" 5.辅助函数是怎么实现的?")]),t._v(" "),a("h3",{attrs:{id:"_6-mutation-和-action-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-mutation-和-action-区别"}},[t._v("#")]),t._v(" 6.Mutation 和 Action 区别")]),t._v(" "),a("ul",[a("li",[t._v("1、流程顺序")])]),t._v(" "),a("blockquote",[a("p",[t._v("“相应视图—>修改 State”拆分成两部分，视图触发 Action，Action 再触发 Mutation。")])]),t._v(" "),a("ul",[a("li",[t._v("2、角色定位")])]),t._v(" "),a("blockquote",[a("p",[t._v("基于流程顺序，二者扮演不同的角色。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Mutation：专注于修改 State，理论上是修改 State 的唯一途径。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Action：业务代码、异步请求。")])]),t._v(" "),a("ul",[a("li",[t._v("3、限制")])]),t._v(" "),a("blockquote",[a("p",[t._v("角色不同，二者有不同的限制。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Mutation：必须同步执行。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Action：可以异步，但不能直接操作 State。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);