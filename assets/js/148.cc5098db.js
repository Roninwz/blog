(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{498:function(e,t,r){"use strict";r.r(t);var n=r(43),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"vue双向数据绑定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue双向数据绑定"}},[e._v("#")]),e._v(" vue双向数据绑定")]),e._v(" "),r("p",[e._v("vue的双向绑定是由数据劫持结合发布者－订阅者模式实现的\n数据劫持：通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时发布消息给订阅者，触发相应的监听回调。")]),e._v(" "),r("ul",[r("li",[e._v("完成双向绑定：\n1.实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。")])]),e._v(" "),r("p",[e._v("2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。")]),e._v(" "),r("p",[e._v("3.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。")]),e._v(" "),r("p",[e._v("实现数据绑定的做法有大致如下几种：")]),e._v(" "),r("p",[e._v("发布者-订阅者模式（backbone.js）\n脏值检查（angular.js）\n数据劫持（vue.js）")])])}),[],!1,null,null,null);t.default=s.exports}}]);