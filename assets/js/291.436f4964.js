(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{652:function(t,e,r){"use strict";r.r(e);var s=r(43),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"网络安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络安全"}},[t._v("#")]),t._v(" 网络安全")]),t._v(" "),r("h3",{attrs:{id:"_1-xss-与-csrf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-xss-与-csrf"}},[t._v("#")]),t._v(" 1.XSS 与 CSRF")]),t._v(" "),r("ul",[r("li",[t._v("XSS（跨站脚本攻击），全称 Cross Site Scripting，恶意攻击者向 web 页面中植入恶意 js 代码，当用户浏览到该页时，植入的代码被执行，达到恶意攻击用户的目的。----- 通过客户端脚本语言（最常见如：JavaScript）")]),t._v(" "),r("li",[t._v("CSRF 跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。")]),t._v(" "),r("li",[t._v("CSRF----冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）")]),t._v(" "),r("li",[t._v("（详解："),r("a",{attrs:{href:"https://segmentfault.com/a/1190000007059639",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://segmentfault.com/a/1190000007059639"),r("OutboundLink")],1),t._v("）")])]),t._v(" "),r("h3",{attrs:{id:"_2-xss-防范："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-xss-防范："}},[t._v("#")]),t._v(" 2. XSS 防范：")]),t._v(" "),r("ol",[r("li",[r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSP 内容安全策略"),r("OutboundLink")],1),t._v("，主流浏览器都实现了 CSP。")]),t._v(" "),r("blockquote",[r("p",[t._v("配置内容安全策略涉及到添加 Content-Security-Policy HTTP 头部到一个页面，并配置相应的值，以控制用户代理（浏览器等）可以为该页面获取哪些资源。比如一个可以上传文件和显示图片页面，应该允许图片来自任何地方，但限制表单的 action 属性只可以赋值为指定的端点。一个经过恰当设计的内容安全策略应该可以有效的保护页面免受跨站脚本攻击。 (MDN)")])])]),t._v(" "),r("li",[r("p",[t._v("通过设置 HttpOnly 防止 Cookie 被读取。")])]),t._v(" "),r("li",[r("p",[t._v("前端对用户的输入进行检查转义，建立白名单，只允许安全的字符和 HTML 标签存在：")])]),t._v(" "),r("li",[r("p",[t._v("前端逻辑比较容易被绕过，所以后端也要对接收的数据进行检查过滤，并在输出或者拼接 HTML 的时候进行编码、转义。")])])]),t._v(" "),r("h3",{attrs:{id:"_3-csrf-防范："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-csrf-防范："}},[t._v("#")]),t._v(" 3 CSRF 防范：")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("Referer 字段")]),t._v(" "),r("p",[t._v("在 http 的请求头里，有一个 Referer 字段，记录了 http 请求的来源地址，服务端通过检查这个字段，判断请求是否来自合法地址。但需要注意的是，Referer 字段是由浏览器来进行添加的，所以存在被篡改的可能。")])]),t._v(" "),r("li",[r("p",[t._v("验证机制")]),t._v(" "),r("p",[t._v("通常 CSRF 是在用户不知情的情况下发送请求进行攻击的，所以可以利用验证机制强制用户与网站进行交互，例如发送验证码到用户的手机、邮箱，或者需要用户拼图、填写验证码等。但验证机制对于用户体验不太好，而且并不是所有操作都能加上验证的。")])]),t._v(" "),r("li",[r("p",[t._v("token")]),t._v(" "),r("p",[t._v("服务端在用户登录后，签发一个随机的 token，可以埋在页面中，也可以存储在 sessionStorage 中，然后在客户端设置拦截器，为所有请求加上 token，服务端再设置拦截器，检查请求是否拥有 token。因为同源策略（协议、域名、端口相同为同源）的原因，CSRF 并不能拿到 token")])])]),t._v(" "),r("h3",{attrs:{id:"_4-token-作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-token-作用"}},[t._v("#")]),t._v(" 4.Token 作用")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("防止表单重复提交、")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("防止 csrf 攻击（跨站点请求伪造）。")])])]),t._v(" "),r("li",[t._v("两者在原理上都是通过 session token 来实现的。当客户端请求页面时，服务器会生成一个随机数 Token，并且将 Token 放置到 session 当中，然后将 Token 发给客户端（一般通过构造 hidden 表单）。下次客户端提交请求时，Token 会随着表单一起提交到服务器端。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);