(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{511:function(e,t,o){"use strict";o.r(t);var r=o(43),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"vue-router-原理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-原理"}},[e._v("#")]),e._v(" vue-router 原理")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("vue-router 实现单页面路由跳转，三种路由模式：")]),e._v(" "),o("blockquote",[o("p",[e._v("hash 模式、history 模式、abstract 模式")])])]),e._v(" "),o("li",[o("ol",[o("li",[e._v("hash 模式\n"),o("blockquote",[o("p",[e._v('利用 URL 中的 hash("#");'),o("br"),e._v("\n#本身以及它后面的字符称之为 hash 可通过 "),o("code",[e._v("window.location.hash")]),e._v(" 属性读取."),o("br"),e._v("\nhash 虽然出现在 url 中，但不会被包括在 http 请求中，它是用来指导浏览器动作的，对服务器端完全无用，因此，改变 hash 不会重新加载页面。"),o("br"),e._v("\n可以为 hash 的改变添加监听事件："),o("br"),e._v(" "),o("code",[e._v('window.addEventListener("hashchange",funcRef,false)')]),e._v("\n每一次改变 hash("),o("code",[e._v("window.location.hash")]),e._v(")，都会在浏览器访问历史中增加一个记录。"),o("br"),e._v('\n利用 hash 的以上特点，就可以来实现前端路由"更新视图但不重新请求页面"的功能了。')])])])]),e._v(" "),o("ul",[o("li",[o("ol",[o("li",[o("code",[e._v("HashHistory.push()")]),e._v(" "),o("blockquote",[o("p",[e._v("原理： 通过 "),o("code",[e._v("Vue.mixin()")]),e._v("方法，全局注册一个混合，影响注册之后所有创建的每个 Vue 实例，该混合在 beforeCreate 钩子中通过 "),o("code",[e._v("Vue.util.defineReactive()")]),e._v("定义了响应式的_route 属性。所谓响应式属性，即当"),o("code",[e._v("\\_route")]),e._v(" 值改变时，会自动调用 Vue 实例的"),o("code",[e._v("render()")]),e._v("方法，更新视图。")])])])]),e._v(" "),o("blockquote",[o("p",[e._v("顺序："),o("code",[e._v("\\$router.push()--\x3eHashHistory.push()--\x3eHistory.transitionTo()--\x3eHistory.updateRoute()--\x3e{app.\\_route=route}--\x3evm.render()")])])])]),e._v(" "),o("li",[o("ol",{attrs:{start:"2"}},[o("li",[o("code",[e._v("HashHistory.replace()")]),e._v(" "),o("blockquote",[o("p",[e._v("原理： 调用 "),o("code",[e._v("window.location.replace")]),e._v(" 方法将路由进行替换")])])])])]),e._v(" "),o("li",[o("ol",{attrs:{start:"3"}},[o("li",[e._v("监听地址栏\n"),o("blockquote",[o("p",[e._v("上面的 "),o("code",[e._v("VueRouter.push()")]),e._v("和 "),o("code",[e._v("VueRouter.replace()")]),e._v("是可以在 vue 组件的逻辑代码中直接调用的，除此之外在浏览器中，用户还可以直接在浏览器地址栏中输入改变路由，因此还需要监听浏览器地址栏中路由的变化 ，并具有与通过代码调用相同的响应行为，在 HashHistory 中这一功能通过 setupListeners 监听 hashchange 实现：")])])])])])])]),e._v(" "),o("li",[o("ol",{attrs:{start:"2"}},[o("li",[e._v("history 模式")])])])]),e._v(" "),o("blockquote",[o("p",[e._v("利用 HTML5 History API 提供 pushState , replaceState 和 popstate"),o("br"),e._v("\n通过back(),forward(),go()等方法，我们可以读取浏览器历史记录栈的信息，进行各种跳转操作")])]),e._v(" "),o("blockquote",[o("p",[e._v("vue-router 原理主要分成两部分，一部分是安装，另一个是实现数据监控，页面跳转。")])]),e._v(" "),o("ul",[o("li",[o("ol",[o("li",[e._v("安装\n"),o("blockquote",[o("p",[e._v("通过混入 beforeCreate 实现，路由的绑定和监听操作。初始化 router。调用 Vue 工具类方法 defineReactive，当 router 发生改变时，页面能及时响应更新。最后通过 registerInstance 来实现对 router-view 的挂载操作。")])])])])]),e._v(" "),o("li",[o("ol",{attrs:{start:"2"}},[o("li",[e._v("数据监控和页面跳转\n"),o("blockquote",[o("p",[e._v("路由更新 -> 视图。路由发生变化（hash 有 hashChange 监听方法，history 有 popstate），改变浏览器里的地址，再更新视图。采用 hash 或者 history 的路由模式，前端实现路由跳转。history 模式中，主要通过 pushstate、replaceState、go 实现，它们负责改变浏览器的路由，但是不跳转，这就实现了前端的路由，而 popstate 是监听方法，处理路由改变后，前端页面的显示问题。就是用栈来实现。")])])])])])]),e._v(" "),o("blockquote",[o("p",[e._v("window.addEventListener('hashChange', function() { // ... });")])]),e._v(" "),o("blockquote",[o("p",[e._v("window.addEventListener('popstate', function() { // ... });")])])])}),[],!1,null,null,null);t.default=a.exports}}]);