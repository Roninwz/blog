(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{348:function(t,v,_){t.exports=_.p+"assets/img/tree.4f203ad5.png"},408:function(t,v,_){"use strict";_.r(v);var l=_(43),e=Object(l.a)({},(function(){var t=this,v=t.$createElement,l=t._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h2",{attrs:{id:"树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),l("h3",{attrs:{id:"基本概念"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("树的高度")]),t._v(" "),l("blockquote",[l("p",[t._v("从下往上数的，等于根节点的高度（0，1，2，3）")])])]),t._v(" "),l("li",[l("p",[t._v("节点的深度")]),t._v(" "),l("blockquote",[l("p",[t._v("是根节点到这个节点所经历的边的个数")])])]),t._v(" "),l("li",[l("p",[t._v("节点的高度")]),t._v(" "),l("blockquote",[l("p",[t._v("是该节点到叶子节点的最长路径（边数）")])])]),t._v(" "),l("li",[l("p",[t._v("demo 图\n"),l("img",{attrs:{src:_(348),alt:"image"}})])]),t._v(" "),l("li",[l("p",[t._v("完全二叉树")]),t._v(" "),l("blockquote",[l("p",[t._v("深度为 h，除第 h 层外，其它各层 (1 ～ h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边")])])]),t._v(" "),l("li",[l("p",[t._v("满二叉树")])]),t._v(" "),l("li",[l("p",[t._v("平衡二叉树")]),t._v(" "),l("blockquote",[l("p",[t._v("二叉树中，每一个节点的左右子树的高度相差不能大于 1，称为")])])])]),t._v(" "),l("h3",{attrs:{id:"二叉树的遍历"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[t._v("#")]),t._v(" 二叉树的遍历")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("深度优先遍历(DFS)")]),t._v(" "),l("ul",[l("li",[t._v("前序遍历")]),t._v(" "),l("li",[t._v("中序遍历")]),t._v(" "),l("li",[t._v("后序遍历")])])])]),t._v(" "),l("blockquote",[l("p",[t._v("所谓前、中、后，不过是根的顺序，即也可以称为先根遍历、中根遍历、后根遍历")])]),t._v(" "),l("ul",[l("li",[l("p",[t._v("广度优先遍历(BFS)")]),t._v(" "),l("blockquote",[l("p",[t._v("层序遍历")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);