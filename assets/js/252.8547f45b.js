(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{613:function(n,t,a){"use strict";a.r(t);var e=a(43),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"数据结构和算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法"}},[n._v("#")]),n._v(" 数据结构和算法")]),n._v(" "),a("h3",{attrs:{id:"_2-时间复杂度和空间复杂度？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-时间复杂度和空间复杂度？"}},[n._v("#")]),n._v(" 2. 时间复杂度和空间复杂度？")]),n._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/chenjinxinlove/p/10038919.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://www.cnblogs.com/chenjinxinlove/p/10038919.html"),a("OutboundLink")],1)])]),n._v(" "),a("h3",{attrs:{id:"_3-平衡二叉树-avl-和红黑树的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-平衡二叉树-avl-和红黑树的区别"}},[n._v("#")]),n._v(" 3. 平衡二叉树(AVL)和红黑树的区别")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("- （1）应用场景\n① AVL树 ：Windows NT 内核中广泛使用\n\n② 红黑树：C++ STL（比如 map、set ）Java 的 TreeMap、TreeSet、HashMap、HashSet  Linux 的进程调度  Ngix 的 timer 管理\n\n- （2）平衡标准\n\n①AVL树 平衡标准比较严格：每个左右子树的高度差不超过1\n\n最大高度是 1.44  ∗  log2  n + 2 − 1.328（100W个节点，AVL树最大树高28）\n\n搜索、添加、删除都是 O(logn) 复杂度，其中添加仅需 O(1) 次旋转调整、删除最多需要 O(logn) 次旋转调整\n\n② 红黑树 平衡标准比较宽松：没有一条路径会大于其他路径的2倍\n\n最大高度是 2 ∗ log2(n + 1)（ 100W个节点，红黑树最大树高40）\n\n搜索、添加、删除都是 O(logn) 复杂度，其中添加、删除都仅需 O(1) 次旋转调整\n\n◼ 搜索的次数远远大于插入和删除，选择AVL树；搜索、插入、删除次数几乎差不多，选择红黑树\n\n◼ 相对于AVL树来说，红黑树牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说性能要优于AVL树\n\n◼ 红黑树的平均统计性能优于AVL树，实际应用中更多选择使用红黑树\n")])])]),a("h3",{attrs:{id:"_10-希尔排序的时间复杂度和空间复杂度多少？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-希尔排序的时间复杂度和空间复杂度多少？"}},[n._v("#")]),n._v(" 10. 希尔排序的时间复杂度和空间复杂度多少？")]),n._v(" "),a("ul",[a("li",[n._v("实现36进制转换")]),n._v(" "),a("li",[n._v("算法：树的遍历有几种方式，实现下层次遍历")]),n._v(" "),a("li",[n._v("算法：判断对称二叉树")]),n._v(" "),a("li",[n._v("合并乱序区间")])])])}),[],!1,null,null,null);t.default=s.exports}}]);